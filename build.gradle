plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'dev.rgbmc'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = "https://repo.fastmcmirror.org/content/repositories/releases/"
    }
    maven {
        url = "https://jitpack.io"
    }
}

dependencies {
    testImplementation 'org.slf4j:slf4j-nop:2.0.7'
    compileOnly 'org.slf4j:slf4j-api:2.0.7'
    compileOnly "org.spigotmc:spigot-api:1.13.2-R0.1-SNAPSHOT"
    implementation "net.lingala.zip4j:zip4j:2.11.5"
    implementation "it.sauronsoftware.cron4j:cron4j:2.2.5"
    implementation "dev.rgbmc:FastExpression:1.0.0-a0aa2c1"
    implementation "org.badiff:badiff:1.2.1"
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    archiveClassifier = ""
    relocate("it.sauronsoftware.cron4j", "dev.rgbmc.ferrum.libs.cron4j")
    relocate("net.lingala.zip4j", "dev.rgbmc.ferrum.libs.zip4j")
    relocate("io.sigpipe.jbsdiff", "dev.rgbmc.ferrum.libs.jbsdiff")
    relocate("dev.rgbmc.expression", "dev.rgbmc.ferrum.libs.expression")
}